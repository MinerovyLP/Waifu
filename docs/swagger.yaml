basePath: /
definitions:
  database.ReportRes:
    properties:
      author_id:
        type: integer
      description:
        type: string
      existed:
        type: boolean
      image_id:
        type: integer
    type: object
  models.Artist:
    properties:
      artist_id:
        example: 1
        type: integer
      deviant_art:
        example: https://www.deviantart.com/4thwallzart
        type: string
      name:
        example: fourthwallzart
        type: string
      patreon:
        type: string
      pixiv:
        type: string
      twitter:
        example: https://twitter.com/4thWallzArt
        type: string
    type: object
  models.Image:
    properties:
      artist:
        $ref: '#/definitions/models.Artist'
      byte_size:
        example: 3299586
        type: integer
      dominant_color:
        example: '#bbb7b2'
        type: string
      extension:
        example: .png
        type: string
      favorites:
        example: 1
        type: integer
      height:
        example: 2304
        type: integer
      image_id:
        example: 8108
        type: integer
      is_nsfw:
        example: false
        type: boolean
      liked_at:
        type: string
      preview_url:
        example: https://www.waifu.im/preview/8108/
        type: string
      signature:
        example: 58e6f0372364abda
        type: string
      source:
        example: https://www.patreon.com/posts/persephone-78224476
        type: string
      tags:
        items:
          $ref: '#/definitions/models.Tag'
        type: array
      uploaded_at:
        example: "2023-05-03T18:40:04.381354+02:00"
        type: string
      url:
        example: https://cdn.waifu.im/8108.png
        type: string
      width:
        example: 1536
        type: integer
    type: object
  models.Tag:
    properties:
      description:
        example: A female anime/manga character.
        type: string
      is_nsfw:
        example: false
        type: boolean
      name:
        example: waifu
        type: string
      tag_id:
        example: 12
        type: integer
    type: object
  serializers.FavState:
    properties:
      state:
        example: INSERT
        type: string
    type: object
  serializers.Image:
    properties:
      image_id:
        type: integer
    type: object
  serializers.ImagesJsonResponse:
    properties:
      images:
        items:
          $ref: '#/definitions/models.Image'
        type: array
    type: object
  serializers.JSONError:
    properties:
      detail:
        type: string
    type: object
  serializers.ReportImage:
    properties:
      description:
        example: Here is a less than 200 characters and optional description
        maxLength: 200
        type: string
      image_id:
        type: integer
    type: object
  serializers.TagsJsonResponse:
    properties:
      nsfw:
        items: {}
        type: array
      versatile:
        items: {}
        type: array
    type: object
  serializers.User:
    properties:
      user_id:
        type: integer
    type: object
host: api.waifu.im
info:
  contact:
    email: contact@waifu.im
    name: Contact
    url: http://www.waifu.im/contact
  description: |-
    WAIFU.IM is an easy to use API that allows you to get waifu pictures from an archive of over 4000 images and multiple tags!

    ## Versioning

    You can specify which version of the API you want to use by placing it in the `Accept-Version` header.

    If the value doesn't match any version, the latest version is used.

    We highly recommend using versioning to prevent your app from breaking if a new version with breaking changes is developed. You can check which version you are using in the `Version` response header.

    The latest version of the API is `v5`.

    ## Breaking Changes

    - `FAVOURITES` became `FAVORITES`.

    - `/fav/delete` and `/fav/insert` now return the same structure as `/fav/toggle` and return a `200` status code.

    - For more information, please join the Discord server or contact us by email.

    ## Rate Limit

    Note: This rate limit only applies to the `api.waifu.im` domain.

    The rate limit is **1** request every **200** milliseconds. If you exceed this limit, the request will be put in a queue (with a maximum size of **10**).

    If the queue is full, the server will respond with a **429** status code.

    You can check the `Retry-After` header to get the time to wait (in seconds) before making another request.

    ## Resources

    Here are some useful resources related to the API:

    - [GitHub](https://github.com/Waifu-im)

    - [Python wrapper](https://github.com/Waifu-im/waifuim.py)

    - [C# wrapper](https://github.com/SoNearSonar/WaifuImAPI-NET)

    ## Tags

    Images are classified by a tag system and can have multiple tags!

    There are versatile tags that can describe both safe and lewd images, as well as NSFW tags that only describe lewd images.

    You can get a list of all tags at the `/tags` endpoint.

    ## Generate an Authorization Link

    This part isn't directly related to the API, and the base URL is not the same.

    This will allow you to generate a link asking a user to click on it and grant permissions over their Waifu.im account (you can also do the opposite with revoke).

    This will be useful if you want to use the `user_id` query string when dealing with favorites.

    | URI                                        | Request type |
    |--------------------------------------------|--------------|
    | https://www.waifu.im/authorization/        | GET          |
    | https://www.waifu.im/authorization/revoke/ | GET          |

    ### Query strings

    | Name        | Required | Type         | Behavior                                                                                                  |
    |-------------|----------|--------------|-----------------------------------------------------------------------------------------------------------|
    | user_id     | Yes      | Integer      | The Discord user ID of the user that will receive the permissions                                         |
    | permissions | Yes      | String Array | The permissions that will be asked for. Available permissions are `view_favorites` and `manage_favorites` |

    To take in an array of values, provide the query string again with different values.


    ## ⚠️ Warning
    If you want to try routes that require authentication, you need to include your token. You can find your token at [https://www.waifu.im/dashboard](https://www.waifu.im/dashboard).

    To include your token:

    1. Click the `Authorize` button below.

    2. In the dialog that appears, enter your token in the `Value` field.

    3. Click `Authorize` to apply the token.

    **Note:** When filling the field, ensure that you include the word `Bearer ` (with the space) before your token to properly authenticate your requests.
  license:
    name: MPL 2.0
    url: https://www.mozilla.org/en-US/MPL/2.0/
  termsOfService: https://www.waifu.im/terms-of-service
  title: Waifu.im
  version: 5.2.3
paths:
  /fav:
    get:
      consumes:
      - application/json
      description: Retrieves images based on the user's favorites.
      parameters:
      - description: Force the API to return images with at least all the provided
          tags
        in: query
        items:
          type: string
        name: included_tags
        type: array
      - description: Force the API to return images without any of the provided tags
        in: query
        items:
          type: string
        name: excluded_tags
        type: array
      - description: Force the API to provide only the specified file IDs or signatures
        example: 58e6f0372364abda
        in: query
        items:
          type: string
        name: included_files
        type: array
      - description: Force the API to not list the specified file IDs or signatures
        example: "8108"
        in: query
        items:
          type: string
        name: excluded_files
        type: array
      - default: "false"
        description: Force or exclude lewd files (only works if included_tags only
          contain versatile tags and no nsfw only tag).  You  can  provide  'null'  to  make  it  be  random.
        enum:
        - "null"
        - "true"
        - "false"
        in: query
        name: is_nsfw
        type: string
      - description: Force or prevent the API to return .gif files
        in: query
        name: gif
        type: boolean
      - default: RANDOM
        description: Ordering criteria
        enum:
        - FAVORITES
        - UPLOADED_AT
        - LIKED_AT
        - RANDOM
        in: query
        name: order_by
        type: string
      - default: RANDOM
        description: Image orientation
        enum:
        - LANDSCAPE
        - PORTRAIT
        - RANDOM
        in: query
        name: orientation
        type: string
      - default: false
        description: Return an array of 30 files if true
        in: query
        name: many
        type: boolean
      - default: false
        description: Returns the full result without any limit (admins only)
        in: query
        name: full
        type: boolean
      - description: 'Filter images by width (in pixels).                                   Accepted  operators:  <=,  >=,  >,  <,  !=,  ='
        example: '>=2000'
        in: query
        name: width
        type: string
      - description: 'Filter images by height (in pixels).                                  Accepted  operators:  <=,  >=,  >,  <,  !=,  ='
        example: '>=2000'
        in: query
        name: height
        type: string
      - description: 'Filter images by byte size. Accepted operators: <=, >=, >, <,
          !=, ='
        example: '>=2000'
        in: query
        name: byte_size
        type: string
      - description: User ID
        in: query
        name: user_id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/serializers.ImagesJsonResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/serializers.JSONError'
      security:
      - ApiKeyAuth: []
      summary: Fetch Favorite Images
      tags:
      - Favorites
  /fav/delete:
    delete:
      consumes:
      - application/json
      description: Removes an image from the user's favorites.
      parameters:
      - description: Image data
        in: body
        name: image
        required: true
        schema:
          $ref: '#/definitions/serializers.Image'
      - description: User ID
        in: body
        name: user_id
        schema:
          $ref: '#/definitions/serializers.User'
      produces:
      - application/json
      responses:
        "200":
          description: DELETED
          schema:
            $ref: '#/definitions/serializers.FavState'
        default:
          description: ""
          schema:
            $ref: '#/definitions/serializers.JSONError'
      security:
      - ApiKeyAuth: []
      summary: Delete an image from favorites
      tags:
      - Favorites
  /fav/insert:
    post:
      consumes:
      - application/json
      description: Inserts an image to the user's favorites.
      parameters:
      - description: Image data
        in: body
        name: image
        required: true
        schema:
          $ref: '#/definitions/serializers.Image'
      - description: User ID
        in: body
        name: user_id
        schema:
          $ref: '#/definitions/serializers.User'
      produces:
      - application/json
      responses:
        "200":
          description: INSERTED
          schema:
            $ref: '#/definitions/serializers.FavState'
        default:
          description: ""
          schema:
            $ref: '#/definitions/serializers.JSONError'
      security:
      - ApiKeyAuth: []
      summary: Insert an image to favorites
      tags:
      - Favorites
  /fav/toggle:
    post:
      consumes:
      - application/json
      description: Toggles an image in the user's favorites.
      parameters:
      - description: Image data
        in: body
        name: image
        required: true
        schema:
          $ref: '#/definitions/serializers.Image'
      - description: User ID
        in: body
        name: user_id
        schema:
          $ref: '#/definitions/serializers.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/serializers.FavState'
        default:
          description: ""
          schema:
            $ref: '#/definitions/serializers.JSONError'
      security:
      - ApiKeyAuth: []
      summary: Toggle an image in favorites
      tags:
      - Favorites
  /report:
    post:
      consumes:
      - application/json
      description: Report an image with a given image ID and description
      parameters:
      - description: Image Data
        in: body
        name: image
        required: true
        schema:
          $ref: '#/definitions/serializers.ReportImage'
      produces:
      - application/json
      responses:
        "200":
          description: Returns the report information
          schema:
            $ref: '#/definitions/database.ReportRes'
        default:
          description: ""
          schema:
            $ref: '#/definitions/serializers.JSONError'
      security:
      - ApiKeyAuth: []
      summary: Report an image
      tags:
      - Report
  /search:
    get:
      consumes:
      - application/json
      description: Retrieves images randomly or by tag based on the specified search
        criteria.
      parameters:
      - description: Force the API to return images with at least all the provided
          tags
        in: query
        items:
          type: string
        name: included_tags
        type: array
      - description: Force the API to return images without any of the provided tags
        in: query
        items:
          type: string
        name: excluded_tags
        type: array
      - description: Force the API to provide only the specified file IDs or signatures
        example: 58e6f0372364abda
        in: query
        items:
          type: string
        name: included_files
        type: array
      - description: Force the API to not list the specified file IDs or signatures
        example: "8108"
        in: query
        items:
          type: string
        name: excluded_files
        type: array
      - default: "false"
        description: Force or exclude lewd files (only works if included_tags only
          contain versatile tags and no nsfw only tag).  You  can  provide  'null'  to  make  it  be  random.
        enum:
        - "null"
        - "true"
        - "false"
        in: query
        name: is_nsfw
        type: string
      - description: Force or prevent the API to return .gif files
        in: query
        name: gif
        type: boolean
      - default: RANDOM
        description: Ordering criteria
        enum:
        - FAVORITES
        - UPLOADED_AT
        - LIKED_AT
        - RANDOM
        in: query
        name: order_by
        type: string
      - default: RANDOM
        description: Image orientation
        enum:
        - LANDSCAPE
        - PORTRAIT
        - RANDOM
        in: query
        name: orientation
        type: string
      - default: false
        description: Return an array of 30 files if true
        in: query
        name: many
        type: boolean
      - default: false
        description: Returns the full result without any limit (admins only)
        in: query
        name: full
        type: boolean
      - description: 'Filter images by width (in pixels).                                   Accepted  operators:  <=,  >=,  >,  <,  !=,  ='
        example: '>=2000'
        in: query
        name: width
        type: string
      - description: 'Filter images by height (in pixels).                                  Accepted  operators:  <=,  >=,  >,  <,  !=,  ='
        example: '>=2000'
        in: query
        name: height
        type: string
      - description: 'Filter images by byte size. Accepted operators: <=, >=, >, <,
          !=, ='
        example: '>=2000'
        in: query
        name: byte_size
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/serializers.ImagesJsonResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/serializers.JSONError'
      security:
      - ApiKeyAuth: []
      summary: Search Images
      tags:
      - Get Images
  /tags:
    get:
      consumes:
      - application/json
      description: Get a list of tags
      parameters:
      - default: false
        description: Returns more information about the tags, such as a description.
        example: true
        in: query
        name: full
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/serializers.TagsJsonResponse'
        default:
          description: ""
          schema:
            $ref: '#/definitions/serializers.JSONError'
      summary: Get tags
      tags:
      - Tags
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
